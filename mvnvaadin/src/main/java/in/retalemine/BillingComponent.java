package in.retalemine;

import java.util.Arrays;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class BillingComponent extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	public BillingComponent() {
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		setWidth("100.0%");
		setHeight("100.0%");

		mainLayout.addComponent(buildBillingHeader());
		mainLayout.addComponent(buildAddToCart());
		return mainLayout;
	}

	private Component buildAddToCart() {
		HorizontalLayout addToCartLayout = new HorizontalLayout();
		final ComboBox productNameCB = new ComboBox("Product List",Arrays.
				asList(new String[] { "Lux Sandal", "Hamam","Cinthol Old" }));
		final ComboBox productPriceCB = new ComboBox("Price List",
				Arrays.asList(new Double[] { 10.0, 20.0, 30.0, 40.0, 50.0 }));
		TextField qty = new TextField("Quantity");
		final ComboBox qtySuffixCB = new ComboBox("Qty Suffix List",
				Arrays.asList(new String[] { "pcs", "kg", "lt" }));
		final Button addToCartBT = new Button("Add to cart");

		productNameCB.setInputPrompt("Enter a product name");
		productNameCB.setFilteringMode(FilteringMode.CONTAINS);
		productNameCB.setImmediate(true);
		productNameCB.setRequired(true);
		productNameCB.setPageLength(10);
		productNameCB.setScrollToSelectedItem(true);
		productNameCB.setNullSelectionAllowed(true);
		/*String nullitem = "-- none --";
		productNameCB.addItem(nullitem);
		productNameCB.setNullSelectionItemId(nullitem);*/
		productNameCB.setNewItemsAllowed(true);
		productNameCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newProductName) {
				StringBuffer camelCasePName = new StringBuffer();
				Matcher camelCaseMatcher = Pattern.compile("([a-z])([a-z]*)",
						Pattern.CASE_INSENSITIVE).matcher(
						newProductName.trim().replaceAll("\\s+", " "));
				while (camelCaseMatcher.find()) {
					camelCaseMatcher.appendReplacement(camelCasePName,
							camelCaseMatcher.group(1).toUpperCase()
									+ camelCaseMatcher.group(2).toLowerCase());
				}
				camelCaseMatcher.appendTail(camelCasePName);
				productNameCB.addItem(camelCasePName.toString());
				productNameCB.setValue(camelCasePName.toString());
			}
		});

		productPriceCB.setInputPrompt("Select price");
		productPriceCB.setFilteringMode(FilteringMode.STARTSWITH);
		productPriceCB.setImmediate(true);
		productPriceCB.setRequired(true);
		productPriceCB.setPageLength(10);
		productPriceCB.setScrollToSelectedItem(true);
		productPriceCB.setNullSelectionAllowed(true);
		productPriceCB.setNewItemsAllowed(true);
		productPriceCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newPrice) {
				Double parsedPrice = Double.parseDouble(newPrice.trim());
				productPriceCB.addItem(parsedPrice);
				productPriceCB.setValue(parsedPrice);
			}
		});

		qty.setInputPrompt("Enter Quantity");
		qty.setRequired(true);

		qtySuffixCB.setInputPrompt("Select Unit");
		qtySuffixCB.setFilteringMode(FilteringMode.STARTSWITH);
		qtySuffixCB.setImmediate(true);
		qtySuffixCB.setRequired(true);
		qtySuffixCB.setPageLength(10);
		qtySuffixCB.setScrollToSelectedItem(true);
		qtySuffixCB.setNullSelectionAllowed(true);
		qtySuffixCB.setNewItemsAllowed(true);
		qtySuffixCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newQtySuffix) {
				qtySuffixCB.addItem(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
				qtySuffixCB.setValue(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
			}
		});

		addToCartBT.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
			}
		});

		addToCartLayout.setImmediate(false);
		addToCartLayout.setWidth("100%");
		addToCartLayout.setHeight("100%");
		addToCartLayout.setMargin(false);
		addToCartLayout.setSpacing(true);

		addToCartLayout.addComponent(productNameCB);
		addToCartLayout.addComponent(productPriceCB);
		addToCartLayout.addComponent(qty);
		addToCartLayout.addComponent(qtySuffixCB);
		addToCartLayout.addComponent(addToCartBT);

		return addToCartLayout;
	}

	private Component buildBillingHeader() {
		HorizontalLayout billingHeaderLayout = new HorizontalLayout();
		HorizontalLayout billNoLayout = new HorizontalLayout();
		HorizontalLayout billDateLayout = new HorizontalLayout();
		Label billNoCaption = new Label();
		Label billNo = new Label();
		Label billDateCaption = new Label();
		DateField billDate = new DateField();

		billingHeaderLayout.setImmediate(false);
		billingHeaderLayout.setWidth("100%");
		billingHeaderLayout.setHeight("100%");
		billingHeaderLayout.setMargin(false);
		billNoLayout.setSpacing(true);
		billDateLayout.setSpacing(true);

		billNoCaption.setValue("Bill No#");
		billNo.setValue("1");
		billDateCaption.setValue("Date:");
		billDate.setValue(new Date());
		billDate.setReadOnly(true);
		billDate.setDateFormat("dd-mm-yy");

		billingHeaderLayout.addComponent(billNoLayout);
		billingHeaderLayout.setComponentAlignment(billNoLayout,
				Alignment.MIDDLE_LEFT);
		billingHeaderLayout.addComponent(billDateLayout);
		billingHeaderLayout.setComponentAlignment(billDateLayout,
				Alignment.MIDDLE_RIGHT);

		billNoLayout.addComponent(billNoCaption);
		billNoLayout.addComponent(billNo);

		billDateLayout.addComponent(billDateCaption);
		billDateLayout.addComponent(billDate);
		return billingHeaderLayout;
	}
}
