package in.retalemine;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.event.ShortcutAction;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.Align;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class BillingComponent extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	private Table billableItems = new Table();
	private Integer billableItemId = new Integer(1);
	private Label subTotalValue = new Label();
	private Label totalValue = new Label();
	private ComboBox taxType = new ComboBox(null, Arrays.asList(new String[] {
			"Tax", "VAT", "Sales Tax", "Service Tax" }));
	private HashMap<String, Double> taxPercentage = new HashMap<String, Double>() {
		{
			put("Tax", 0.0);
			put("VAT", 4.0);
			put("Sales Tax", 5.0);
			put("Service Tax", 4.5);
		}
	};
	private Label taxValue = new Label();
	private Property.ValueChangeListener billableItemsVCListener;

	public BillingComponent() {
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		setWidth("100.0%");
		setHeight("100.0%");

		mainLayout.addComponent(buildBillingHeader());
		mainLayout.addComponent(buildAddToCart());
		mainLayout.addComponent(buildBillingTable());
		mainLayout.addComponent(buildBillingFooter());

		return mainLayout;
	}

	private Component buildBillingFooter() {
		GridLayout footerGrid = new GridLayout(3, 1);

		footerGrid.setImmediate(false);
		footerGrid.setWidth("100%");
		footerGrid.setMargin(false);
		footerGrid.setSpacing(true);

		footerGrid.addComponent(buildCustomerProfile(), 0, 0, 1, 0);
		footerGrid.addComponent(buildBillingPayments(), 2, 0);

		return footerGrid;
	}

	private Component buildBillingPayments() {
		VerticalLayout paymentLayout = new VerticalLayout();
		HorizontalLayout subTotalLayout = new HorizontalLayout();
		HorizontalLayout taxLayout = new HorizontalLayout();
		HorizontalLayout totalLayout = new HorizontalLayout();
		Label subTotal = new Label();
		Label subTotalColon = new Label();
		Label total = new Label();
		Label totalColon = new Label();
		Label taxColon = new Label();

		subTotal.setValue("SubTotal");

		subTotalValue.setValue("0.0");
		subTotalValue.setStyleName("v-align-right");

		subTotalColon.setValue(":");
		subTotalColon.setStyleName("v-align-right");

		total.setValue("Total");

		totalValue.setValue("0.0");
		totalValue.setStyleName("v-align-right");

		totalColon.setValue(":");
		totalColon.setStyleName("v-align-right");

		taxType.select("Tax");
		taxType.setFilteringMode(FilteringMode.CONTAINS);
		taxType.setImmediate(true);
		taxType.setWidth("100%");
		taxType.setPageLength(5);
		taxType.setNullSelectionAllowed(false);
		taxType.addValueChangeListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				taxValue.setValue(String.valueOf((taxPercentage.get(event
						.getProperty().getValue()) * Double
						.parseDouble(subTotalValue.getValue())) / 100));
				totalValue.setValue(String.valueOf(Double
						.parseDouble(subTotalValue.getValue())
						+ Double.parseDouble(taxValue.getValue())));
			}
		});

		taxValue.setValue("0.0");
		taxValue.setStyleName("v-align-right");

		taxColon.setValue(":");
		taxColon.setStyleName("v-align-right");

		paymentLayout.addComponent(subTotalLayout);
		paymentLayout.addComponent(taxLayout);
		paymentLayout.addComponent(totalLayout);

		subTotalLayout.addComponent(subTotal);
		subTotalLayout.addComponent(subTotalColon);
		subTotalLayout.addComponent(subTotalValue);

		taxLayout.addComponent(taxType);
		taxLayout.addComponent(taxColon);
		taxLayout.addComponent(taxValue);

		totalLayout.addComponent(total);
		totalLayout.addComponent(totalColon);
		totalLayout.addComponent(totalValue);

		subTotalLayout.setComponentAlignment(subTotal, Alignment.BOTTOM_LEFT);
		subTotalLayout.setComponentAlignment(subTotalColon,
				Alignment.BOTTOM_CENTER);
		subTotalLayout.setComponentAlignment(subTotalValue,
				Alignment.BOTTOM_RIGHT);
		subTotalLayout.setImmediate(false);
		subTotalLayout.setWidth("100%");
		subTotalLayout.setMargin(false);
		subTotalLayout.setSpacing(true);

		taxLayout.setComponentAlignment(taxType, Alignment.BOTTOM_LEFT);
		taxLayout.setComponentAlignment(taxColon, Alignment.BOTTOM_CENTER);
		taxLayout.setComponentAlignment(taxValue, Alignment.BOTTOM_RIGHT);
		taxLayout.setImmediate(false);
		taxLayout.setWidth("100%");
		taxLayout.setMargin(false);
		taxLayout.setSpacing(true);

		totalLayout.setComponentAlignment(total, Alignment.BOTTOM_LEFT);
		totalLayout.setComponentAlignment(totalColon, Alignment.BOTTOM_CENTER);
		totalLayout.setComponentAlignment(totalValue, Alignment.BOTTOM_RIGHT);
		totalLayout.setImmediate(false);
		totalLayout.setWidth("100%");
		totalLayout.setMargin(false);
		totalLayout.setSpacing(true);

		paymentLayout.setImmediate(false);
		paymentLayout.setWidth("100%");
		paymentLayout.setMargin(true);
		paymentLayout.setSpacing(true);

		return paymentLayout;
	}

	private Component buildBillingPaymentsTable() {
		VerticalLayout paymentLayout = new VerticalLayout();
		Table subTotal = new Table();
		Table taxable = new Table();
		Table total = new Table();

		subTotal.addContainerProperty("Type", String.class, "");
		subTotal.addContainerProperty(":", String.class, "");
		subTotal.addContainerProperty("Value", String.class, "");
		subTotal.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		subTotal.addItem(new Object[] { "SubTotal", ":", "0.0" }, 1);
		subTotal.setPageLength(1);
		subTotal.setWidth("100%");
		subTotal.setColumnAlignment("Value", Align.RIGHT);
		subTotal.setColumnWidth(":", 4);
		subTotal.setColumnWidth("Value", 100);

		taxable.addContainerProperty("Type", String.class, "");
		taxable.addContainerProperty(":", String.class, "");
		taxable.addContainerProperty("Value", String.class, "");
		taxable.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		taxable.addItem(new Object[] { "Tax", ":", "0.0" }, 1);
		taxable.setPageLength(taxable.size());
		taxable.setWidth("100%");
		taxable.setColumnAlignment("Value", Align.RIGHT);
		taxable.setColumnWidth(":", 4);
		taxable.setColumnWidth("Value", 100);

		total.addContainerProperty("Type", String.class, "");
		total.addContainerProperty(":", String.class, "");
		total.addContainerProperty("Value", String.class, "");
		total.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		total.addItem(new Object[] { "Total", ":", "0.0" }, 1);
		total.setPageLength(1);
		total.setWidth("100%");
		total.setColumnAlignment("Value", Align.RIGHT);
		total.setColumnWidth(":", 4);
		total.setColumnWidth("Value", 100);

		paymentLayout.setImmediate(false);
		paymentLayout.setWidth("100%");
		paymentLayout.setMargin(false);
		paymentLayout.setSpacing(false);

		paymentLayout.addComponent(subTotal);
		paymentLayout.addComponent(taxable);
		paymentLayout.addComponent(total);

		return paymentLayout;
	}

	private Component buildCustomerProfile() {
		Panel customerPanel = new Panel("Customer details");

		customerPanel.setImmediate(false);
		customerPanel.setWidth("100%");
		customerPanel.setHeight("100%");

		return customerPanel;
	}

	private Component buildBillingTable() {
		Panel billingPanel = new Panel();

		billableItems.addContainerProperty("No.", Integer.class, null);
		billableItems.addContainerProperty("Product Description", String.class,
				"");
		billableItems.addContainerProperty("Unit Rate", Double.class, 0.0);
		billableItems.addContainerProperty("Quantity", String.class, "1");
		billableItems.addContainerProperty("Amount", Double.class, 0.0);
		billableItems.setImmediate(true);
		billableItems.setSelectable(true);
		billableItems.setPageLength(5);
		billableItems.setWidth("100%");
		billableItems.setColumnAlignment("Amount", Align.RIGHT);
		billableItems.setColumnExpandRatio("No.", 1);
		billableItems.setColumnExpandRatio("Product Description", 18);
		billableItems.setColumnExpandRatio("Unit Rate", 4);
		billableItems.setColumnExpandRatio("Quantity", 2);
		billableItems.setColumnExpandRatio("Amount", 6);
		/*
		 * billableItems.setFooterVisible(true);
		 * billableItems.setColumnFooter("Quantity", "Sub Total");
		 * billableItems.setColumnFooter("Amount", "0.0");
		 */
		billableItems.addValueChangeListener(billableItemsVCListener);

		billingPanel.addActionHandler(new Handler() {
			Action actionDel = new ShortcutAction("Delete Item",
					ShortcutAction.KeyCode.DELETE, null);

			@Override
			public void handleAction(Action action, Object sender, Object target) {
				if (target instanceof Table) {
					if (action == actionDel) {
						Object removeItemId = billableItems.getValue();
						billableItems.removeItem(removeItemId);
						reOrderBillingSNo();
						updateBillingPayments();
					}
				}
			}

			private void updateBillingPayments() {
				double subTotal = 0;
				for (Iterator<?> i = billableItems.getItemIds().iterator(); i
						.hasNext();) {
					subTotal += (Double) billableItems.getItem(i.next())
							.getItemProperty("Amount").getValue();
				}
				subTotalValue.setValue(String.valueOf(subTotal));
				taxValue.setValue(String.valueOf((taxPercentage.get(taxType
						.getValue()) * Double.parseDouble(subTotalValue
						.getValue())) / 100));
				totalValue.setValue(String.valueOf(Double
						.parseDouble(subTotalValue.getValue())
						+ Double.parseDouble(taxValue.getValue())));
			}

			@SuppressWarnings("unchecked")
			private void reOrderBillingSNo() {
				Integer itemId = 1;
				for (Iterator<?> i = billableItems.getItemIds().iterator(); i
						.hasNext();) {
					billableItems.getItem(i.next()).getItemProperty("No.")
							.setValue(itemId++);
				}
			}

			@Override
			public Action[] getActions(Object target, Object sender) {
				return new Action[] { actionDel };
			}
		});

		billingPanel.setImmediate(true);
		billingPanel.setWidth("100%");
		billingPanel.setHeight("100%");

		billingPanel.setContent(billableItems);

		return billingPanel;
	}

	private Component buildAddToCart() {
		HorizontalLayout addToCartLayout = new HorizontalLayout();
		final ComboBox productNameCB = new ComboBox(null,
				Arrays.asList(new String[] { "Lux Sandal", "Hamam",
						"Cinthol Old" }));
		final ComboBox productPriceCB = new ComboBox(null,
				Arrays.asList(new Double[] { 10.0, 20.0, 30.0, 40.0, 50.0 }));
		final TextField qty = new TextField();
		final ComboBox qtySuffixCB = new ComboBox(null,
				Arrays.asList(new String[] { "pcs", "kg", "lt" }));
		final Button addToCartBT = new Button("Add To Cart");
		Property.ValueChangeListener addToCartEnabler;

		addToCartEnabler = new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (null != productNameCB.getValue()
						&& null != productPriceCB.getValue() && null != qty
						&& !"".equals(qty.getValue().trim())
						&& null != qtySuffixCB.getValue()) {
					addToCartBT.setEnabled(true);
				} else {
					addToCartBT.setEnabled(false);
				}
			}
		};

		productNameCB.setInputPrompt("Enter a product name");
		productNameCB.setFilteringMode(FilteringMode.CONTAINS);
		productNameCB.setImmediate(true);
		productNameCB.setWidth("100%");
		productNameCB.setRequired(true);
		productNameCB.setPageLength(10);
		productNameCB.setNullSelectionAllowed(true);
		/*
		 * productNameCB.setScrollToSelectedItem(true); String nullitem =
		 * "-- none --"; productNameCB.addItem(nullitem);
		 * productNameCB.setNullSelectionItemId(nullitem);
		 */
		productNameCB.setNewItemsAllowed(true);
		productNameCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newProductName) {
				StringBuffer camelCasePName = new StringBuffer();
				Matcher camelCaseMatcher = Pattern.compile("([a-z])([a-z]*)",
						Pattern.CASE_INSENSITIVE).matcher(
						newProductName.trim().replaceAll("\\s+", " "));
				while (camelCaseMatcher.find()) {
					camelCaseMatcher.appendReplacement(camelCasePName,
							camelCaseMatcher.group(1).toUpperCase()
									+ camelCaseMatcher.group(2).toLowerCase());
				}
				camelCaseMatcher.appendTail(camelCasePName);
				productNameCB.addItem(camelCasePName.toString());
				productNameCB.setValue(camelCasePName.toString());
			}
		});
		productNameCB.addValueChangeListener(addToCartEnabler);

		productPriceCB.setInputPrompt("Select rate");
		productPriceCB.setFilteringMode(FilteringMode.STARTSWITH);
		productPriceCB.setImmediate(true);
		productPriceCB.setWidth("100%");
		productPriceCB.setRequired(true);
		productPriceCB.setPageLength(10);
		productPriceCB.setNullSelectionAllowed(true);
		productPriceCB.setNewItemsAllowed(true);
		productPriceCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newPrice) {
				Double parsedPrice = Double.parseDouble(newPrice.trim());
				productPriceCB.addItem(parsedPrice);
				productPriceCB.setValue(parsedPrice);
			}
		});
		productPriceCB.addValueChangeListener(addToCartEnabler);

		qty.setInputPrompt("Enter Quantity");
		qty.setRequired(true);
		qty.setWidth("100%");
		qty.setImmediate(true);
		qty.addValueChangeListener(addToCartEnabler);

		qtySuffixCB.setInputPrompt("Select Unit");
		qtySuffixCB.setFilteringMode(FilteringMode.STARTSWITH);
		qtySuffixCB.setImmediate(true);
		qtySuffixCB.setWidth("100%");
		qtySuffixCB.setRequired(true);
		qtySuffixCB.setPageLength(10);
		qtySuffixCB.setNullSelectionAllowed(true);
		qtySuffixCB.setNewItemsAllowed(true);
		qtySuffixCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newQtySuffix) {
				qtySuffixCB.addItem(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
				qtySuffixCB.setValue(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
			}
		});
		qtySuffixCB.addValueChangeListener(addToCartEnabler);

		addToCartBT.setWidth("100%");
		addToCartBT.setEnabled(false);
		addToCartBT.setImmediate(true);
		addToCartBT.addClickListener(new Button.ClickListener() {

			@SuppressWarnings("unchecked")
			@Override
			public void buttonClick(ClickEvent event) {
				final Object[] productInfo = new Object[5];

				if ("Update Cart".equals(addToCartBT.getCaption())) {
					Item selectedItemId = billableItems.getItem(billableItems
							.getValue());
					selectedItemId.getItemProperty("Product Description")
							.setValue(productNameCB.getValue());
					selectedItemId.getItemProperty("Unit Rate").setValue(
							productPriceCB.getValue());
					selectedItemId.getItemProperty("Quantity").setValue(
							qty.getValue() + " " + qtySuffixCB.getValue());
					selectedItemId.getItemProperty("Amount").setValue(
							(Double) productPriceCB.getValue()
									* Double.parseDouble(qty.getValue()));
					updateBillingPayments();
					resetAddToCart();
					return;
				}

				productInfo[0] = billableItems.size() + 1;
				productInfo[1] = productNameCB.getValue();
				productInfo[2] = productPriceCB.getValue();
				productInfo[3] = qty.getValue() + " " + qtySuffixCB.getValue();
				productInfo[4] = (Double) productPriceCB.getValue()
						* Double.parseDouble(qty.getValue());
				billableItems.addItem(productInfo, billableItemId++);
				billableItems.setCurrentPageFirstItemId(billableItems.size()
						- billableItems.getPageLength());
				/*
				 * billableItems.setColumnFooter("Net Price", String
				 * .valueOf(Double.parseDouble(billableItems
				 * .getColumnFooter("Net Price")) + (Double) productInfo[4]));
				 */
				updateBillingPayments();
				resetAddToCart();
			}

			private void updateBillingPayments() {
				double subTotal = 0;
				for (Iterator<?> i = billableItems.getItemIds().iterator(); i
						.hasNext();) {
					subTotal += (Double) billableItems.getItem(i.next())
							.getItemProperty("Amount").getValue();
				}
				subTotalValue.setValue(String.valueOf(subTotal));
				taxValue.setValue(String.valueOf((taxPercentage.get(taxType
						.getValue()) * Double.parseDouble(subTotalValue
						.getValue())) / 100));
				totalValue.setValue(String.valueOf(Double
						.parseDouble(subTotalValue.getValue())
						+ Double.parseDouble(taxValue.getValue())));
			}

			private void resetAddToCart() {
				productNameCB.setValue(null);
				productPriceCB.setValue(null);
				qty.setValue("");
				qtySuffixCB.setValue(null);
				addToCartBT.setEnabled(false);
				addToCartBT.setCaption("Add To Cart");
			}
		});

		billableItemsVCListener = new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() == null) {
					resetAddToCart();
					return;
				}
				Item billableItem = billableItems.getItem(event.getProperty()
						.getValue());
				productNameCB.setValue(billableItem.getItemProperty(
						"Product Description").getValue());
				productPriceCB.setValue(billableItem.getItemProperty(
						"Unit Rate").getValue());
				String qtyArray[] = billableItem.getItemProperty("Quantity")
						.getValue().toString().split(" ");
				qty.setValue(qtyArray[0]);
				qtySuffixCB.setValue(qtyArray[1]);
				addToCartBT.setCaption("Update Cart");
				addToCartBT.setEnabled(false);
			}

			private void resetAddToCart() {
				productNameCB.setValue(null);
				productPriceCB.setValue(null);
				qty.setValue("");
				qtySuffixCB.setValue(null);
				addToCartBT.setEnabled(false);
				addToCartBT.setCaption("Add To Cart");
			}
		};

		addToCartLayout.setImmediate(false);
		addToCartLayout.setWidth("100%");
		addToCartLayout.setHeight("100%");
		addToCartLayout.setMargin(false);
		addToCartLayout.setSpacing(true);

		addToCartLayout.addComponent(productNameCB);
		addToCartLayout.addComponent(productPriceCB);
		addToCartLayout.addComponent(qty);
		addToCartLayout.addComponent(qtySuffixCB);
		addToCartLayout.addComponent(addToCartBT);

		addToCartLayout.setExpandRatio(productNameCB, 4);
		addToCartLayout.setExpandRatio(productPriceCB, 1.5f);
		addToCartLayout.setExpandRatio(qty, 1f);
		addToCartLayout.setExpandRatio(qtySuffixCB, 1f);
		addToCartLayout.setExpandRatio(addToCartBT, 1.5f);

		return addToCartLayout;
	}

	private Component buildBillingHeader() {
		HorizontalLayout billingHeaderLayout = new HorizontalLayout();
		HorizontalLayout billNoLayout = new HorizontalLayout();
		HorizontalLayout billDateLayout = new HorizontalLayout();
		Label billNoCaption = new Label();
		Label billNo = new Label();
		Label billDateCaption = new Label();
		DateField billDate = new DateField();

		billingHeaderLayout.setImmediate(false);
		billingHeaderLayout.setWidth("100%");
		billingHeaderLayout.setHeight("100%");
		billingHeaderLayout.setMargin(false);
		billNoLayout.setSpacing(true);
		billDateLayout.setSpacing(true);

		billNoCaption.setValue("Bill No :");
		billNo.setValue("1");
		billDateCaption.setValue("Date :");
		billDate.setValue(new Date());
		billDate.setReadOnly(true);
		billDate.setDateFormat("dd-MM-yyyy");

		billingHeaderLayout.addComponent(billNoLayout);
		billingHeaderLayout.setComponentAlignment(billNoLayout,
				Alignment.MIDDLE_LEFT);
		billingHeaderLayout.addComponent(billDateLayout);
		billingHeaderLayout.setComponentAlignment(billDateLayout,
				Alignment.MIDDLE_RIGHT);

		billNoLayout.addComponent(billNoCaption);
		billNoLayout.addComponent(billNo);

		billDateLayout.addComponent(billDateCaption);
		billDateLayout.addComponent(billDate);
		return billingHeaderLayout;
	}
}
