package in.retalemine;

import java.util.Arrays;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.Align;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class BillingComponent extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	private Table billableItems = new Table();

	public BillingComponent() {
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		setWidth("100.0%");
		setHeight("100.0%");

		mainLayout.addComponent(buildBillingHeader());
		mainLayout.addComponent(buildAddToCart());
		mainLayout.addComponent(buildBillingTable());
		mainLayout.addComponent(buildBillingFooter());
		
		return mainLayout;
	}

	private Component buildBillingFooter() {
		GridLayout footerGrid = new GridLayout(3, 1);

		footerGrid.setImmediate(false);
		footerGrid.setWidth("100%");
		footerGrid.setMargin(false);
		footerGrid.setSpacing(true);

		footerGrid.addComponent(buildCustomerProfile(), 0, 0, 1, 0);
		footerGrid.addComponent(buildBillingPayments(), 2, 0);

		return footerGrid;
	}

	private Component buildBillingPayments() {
		VerticalLayout paymentLayout = new VerticalLayout();
		HorizontalLayout subTotalLayout = new HorizontalLayout();
		HorizontalLayout totalLayout = new HorizontalLayout();
		Label subTotal = new Label();
		Label subTotalValue = new Label();
		Label subTotalColon = new Label();
		Label total = new Label();
		Label totalValue = new Label();
		Label totalColon = new Label();

		subTotal.setValue("SubTotal");

		subTotalValue.setValue("0.0");
		subTotalValue.setStyleName("v-align-right");

		subTotalColon.setValue(":");
		subTotalColon.setStyleName("v-align-right");

		total.setValue("Total");

		totalValue.setValue("0.0");
		totalValue.setStyleName("v-align-right");

		totalColon.setValue(":");
		totalColon.setStyleName("v-align-right");

		paymentLayout.addComponent(subTotalLayout);
		paymentLayout.addComponent(totalLayout);

		subTotalLayout.addComponent(subTotal);
		subTotalLayout.addComponent(subTotalColon);
		subTotalLayout.addComponent(subTotalValue);

		totalLayout.addComponent(total);
		totalLayout.addComponent(totalColon);
		totalLayout.addComponent(totalValue);

		subTotalLayout.setComponentAlignment(subTotal, Alignment.BOTTOM_LEFT);
		subTotalLayout.setComponentAlignment(subTotalColon,
				Alignment.BOTTOM_CENTER);
		subTotalLayout.setComponentAlignment(subTotalValue,
				Alignment.BOTTOM_RIGHT);
		subTotalLayout.setImmediate(false);
		subTotalLayout.setWidth("100%");
		subTotalLayout.setMargin(false);
		subTotalLayout.setSpacing(true);

		totalLayout.setComponentAlignment(total, Alignment.BOTTOM_LEFT);
		totalLayout.setComponentAlignment(totalColon, Alignment.BOTTOM_CENTER);
		totalLayout.setComponentAlignment(totalValue, Alignment.BOTTOM_RIGHT);
		totalLayout.setImmediate(false);
		totalLayout.setWidth("100%");
		totalLayout.setMargin(false);
		totalLayout.setSpacing(true);

		paymentLayout.setImmediate(false);
		paymentLayout.setWidth("100%");
		paymentLayout.setMargin(true);
		paymentLayout.setSpacing(true);

		return paymentLayout;
	}

	private Component buildBillingPaymentsTable() {
		VerticalLayout paymentLayout = new VerticalLayout();
		Table subTotal = new Table();
		Table taxable = new Table();
		Table total = new Table();

		subTotal.addContainerProperty("Type", String.class, "");
		subTotal.addContainerProperty(":", String.class, "");
		subTotal.addContainerProperty("Value", String.class, "");
		subTotal.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		subTotal.addItem(new Object[] { "SubTotal", ":", "0.0" }, 1);
		subTotal.setPageLength(1);
		subTotal.setWidth("100%");
		subTotal.setColumnAlignment("Value", Align.RIGHT);
		subTotal.setColumnWidth(":", 4);
		subTotal.setColumnWidth("Value", 100);

		taxable.addContainerProperty("Type", String.class, "");
		taxable.addContainerProperty(":", String.class, "");
		taxable.addContainerProperty("Value", String.class, "");
		taxable.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		taxable.addItem(new Object[] { "Tax", ":", "0.0" }, 1);
		taxable.setPageLength(taxable.size());
		taxable.setWidth("100%");
		taxable.setColumnAlignment("Value", Align.RIGHT);
		taxable.setColumnWidth(":", 4);
		taxable.setColumnWidth("Value", 100);

		total.addContainerProperty("Type", String.class, "");
		total.addContainerProperty(":", String.class, "");
		total.addContainerProperty("Value", String.class, "");
		total.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		total.addItem(new Object[] { "Total", ":", "0.0" }, 1);
		total.setPageLength(1);
		total.setWidth("100%");
		total.setColumnAlignment("Value", Align.RIGHT);
		total.setColumnWidth(":", 4);
		total.setColumnWidth("Value", 100);

		paymentLayout.setImmediate(false);
		paymentLayout.setWidth("100%");
		paymentLayout.setMargin(false);
		paymentLayout.setSpacing(false);

		paymentLayout.addComponent(subTotal);
		paymentLayout.addComponent(taxable);
		paymentLayout.addComponent(total);

		return paymentLayout;
	}

	private Component buildCustomerProfile() {
		Panel customerPanel = new Panel("Customer details");

		customerPanel.setImmediate(false);
		customerPanel.setWidth("100%");
		customerPanel.setHeight("100%");

		return customerPanel;
	}

	private Component buildBillingTable() {
		VerticalLayout billingLayout = new VerticalLayout();

		billableItems.addContainerProperty("No.", Integer.class, null);
		billableItems.addContainerProperty("Product Description", String.class, "");
		billableItems.addContainerProperty("Unit Rate", Double.class, 0.0);
		billableItems.addContainerProperty("Quantity", String.class, "1");
		billableItems.addContainerProperty("Amount", Double.class, 0.0);
		billableItems.setPageLength(5);
		billableItems.setWidth("100%");
		billableItems.setColumnAlignment("Amount", Align.RIGHT);
		/*billableItems.setFooterVisible(true);
		billableItems.setColumnFooter("Quantity", "Sub Total");
		billableItems.setColumnFooter("Amount", "0.0");*/

		billingLayout.setImmediate(false);
		billingLayout.setWidth("100%");
		billingLayout.setHeight("100%");
		billingLayout.setMargin(false);
		billingLayout.setSpacing(true);

		billingLayout.addComponent(billableItems);

		return billingLayout;
	}

	private Component buildAddToCart() {
		HorizontalLayout addToCartLayout = new HorizontalLayout();
		final ComboBox productNameCB = new ComboBox(null,Arrays.
				asList(new String[] { "Lux Sandal", "Hamam","Cinthol Old" }));
		final ComboBox productPriceCB = new ComboBox(null,
				Arrays.asList(new Double[] { 10.0, 20.0, 30.0, 40.0, 50.0 }));
		final TextField qty = new TextField();
		final ComboBox qtySuffixCB = new ComboBox(null,
				Arrays.asList(new String[] { "pcs", "kg", "lt" }));
		final Button addToCartBT = new Button("Add to cart");

		productNameCB.setInputPrompt("Enter a product name");
		productNameCB.setFilteringMode(FilteringMode.CONTAINS);
		productNameCB.setImmediate(true);
		productNameCB.setWidth("100%");
		productNameCB.setRequired(true);
		productNameCB.setPageLength(10);
		//productNameCB.setScrollToSelectedItem(true);
		productNameCB.setNullSelectionAllowed(true);
		/*String nullitem = "-- none --";
		productNameCB.addItem(nullitem);
		productNameCB.setNullSelectionItemId(nullitem);*/
		productNameCB.setNewItemsAllowed(true);
		productNameCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newProductName) {
				StringBuffer camelCasePName = new StringBuffer();
				Matcher camelCaseMatcher = Pattern.compile("([a-z])([a-z]*)",
						Pattern.CASE_INSENSITIVE).matcher(
						newProductName.trim().replaceAll("\\s+", " "));
				while (camelCaseMatcher.find()) {
					camelCaseMatcher.appendReplacement(camelCasePName,
							camelCaseMatcher.group(1).toUpperCase()
									+ camelCaseMatcher.group(2).toLowerCase());
				}
				camelCaseMatcher.appendTail(camelCasePName);
				productNameCB.addItem(camelCasePName.toString());
				productNameCB.setValue(camelCasePName.toString());
			}
		});

		productPriceCB.setInputPrompt("Select rate");
		productPriceCB.setFilteringMode(FilteringMode.STARTSWITH);
		productPriceCB.setImmediate(true);
		productPriceCB.setWidth("100%");
		productPriceCB.setRequired(true);
		productPriceCB.setPageLength(10);
		productPriceCB.setNullSelectionAllowed(true);
		productPriceCB.setNewItemsAllowed(true);
		productPriceCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newPrice) {
				Double parsedPrice = Double.parseDouble(newPrice.trim());
				productPriceCB.addItem(parsedPrice);
				productPriceCB.setValue(parsedPrice);
			}
		});

		qty.setInputPrompt("Enter Quantity");
		qty.setRequired(true);
		qty.setWidth("100%");

		qtySuffixCB.setInputPrompt("Select Unit");
		qtySuffixCB.setFilteringMode(FilteringMode.STARTSWITH);
		qtySuffixCB.setImmediate(true);
		qtySuffixCB.setWidth("100%");
		qtySuffixCB.setRequired(true);
		qtySuffixCB.setPageLength(10);
		qtySuffixCB.setNullSelectionAllowed(true);
		qtySuffixCB.setNewItemsAllowed(true);
		qtySuffixCB.setNewItemHandler(new NewItemHandler() {
			@Override
			public void addNewItem(String newQtySuffix) {
				qtySuffixCB.addItem(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
				qtySuffixCB.setValue(newQtySuffix.trim().toLowerCase()
						.replaceAll("\\s+", ""));
			}
		});

		addToCartBT.setWidth("100%");
		addToCartBT.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				final Object[] productInfo = new Object[5];

				if (!isValidateAddToCart()) {
					return;
				}

				productInfo[0] = billableItems.size() + 1;
				productInfo[1] = productNameCB.getValue();
				productInfo[2] = productPriceCB.getValue();
				productInfo[3] = qty.getValue()+" "+qtySuffixCB.getValue();
				productInfo[4] = (Double) productPriceCB.getValue()
						* Double.parseDouble(qty.getValue());
				billableItems.addItem(productInfo, billableItems.size());
				billableItems.setCurrentPageFirstItemId(billableItems.size()
						- billableItems.getPageLength());
				/*billableItems.setColumnFooter("Net Price", String
						.valueOf(Double.parseDouble(billableItems
								.getColumnFooter("Net Price"))
								+ (Double) productInfo[4]));*/
				resetAddToCart();
			}

			private Boolean isValidateAddToCart() {
				if (null == productNameCB.getValue()
						|| null == productPriceCB.getValue() || null == qty
						|| "".equals(qty.getValue().trim())
						|| null == qtySuffixCB.getValue()) {
					return false;
				}
				return true;
			}

			private void resetAddToCart() {
				productNameCB.setValue(null);
				productPriceCB.setValue(null);
				qty.setValue("");
				qtySuffixCB.setValue(null);
			}
		});

		addToCartLayout.setImmediate(false);
		addToCartLayout.setWidth("100%");
		addToCartLayout.setHeight("100%");
		addToCartLayout.setMargin(false);
		addToCartLayout.setSpacing(true);

		addToCartLayout.addComponent(productNameCB);
		addToCartLayout.addComponent(productPriceCB);
		addToCartLayout.addComponent(qty);
		addToCartLayout.addComponent(qtySuffixCB);
		addToCartLayout.addComponent(addToCartBT);

		return addToCartLayout;
	}

	private Component buildBillingHeader() {
		HorizontalLayout billingHeaderLayout = new HorizontalLayout();
		HorizontalLayout billNoLayout = new HorizontalLayout();
		HorizontalLayout billDateLayout = new HorizontalLayout();
		Label billNoCaption = new Label();
		Label billNo = new Label();
		Label billDateCaption = new Label();
		DateField billDate = new DateField();

		billingHeaderLayout.setImmediate(false);
		billingHeaderLayout.setWidth("100%");
		billingHeaderLayout.setHeight("100%");
		billingHeaderLayout.setMargin(false);
		billNoLayout.setSpacing(true);
		billDateLayout.setSpacing(true);

		billNoCaption.setValue("Bill No :");
		billNo.setValue("1");
		billDateCaption.setValue("Date :");
		billDate.setValue(new Date());
		billDate.setReadOnly(true);
		billDate.setDateFormat("dd-MM-yyyy");

		billingHeaderLayout.addComponent(billNoLayout);
		billingHeaderLayout.setComponentAlignment(billNoLayout,
				Alignment.MIDDLE_LEFT);
		billingHeaderLayout.addComponent(billDateLayout);
		billingHeaderLayout.setComponentAlignment(billDateLayout,
				Alignment.MIDDLE_RIGHT);

		billNoLayout.addComponent(billNoCaption);
		billNoLayout.addComponent(billNo);

		billDateLayout.addComponent(billDateCaption);
		billDateLayout.addComponent(billDate);
		return billingHeaderLayout;
	}
}
