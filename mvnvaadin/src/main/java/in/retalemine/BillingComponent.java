package in.retalemine;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.event.ShortcutAction;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.Align;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class BillingComponent extends CustomComponent {

	private static final long serialVersionUID = -156296978141491295L;
	private VerticalLayout mainLayout;

	private Table billableItems = new Table();
	private Integer billableItemId = new Integer(1);

	private Label subTotalValue = new Label();
	private Label totalValue = new Label();
	private ComboBox taxType = new ComboBox(null, Arrays.asList(new String[] {
			"Tax", "VAT", "Sales Tax", "Service Tax" }));
	private HashMap<String, Double> taxPercentage = new HashMap<String, Double>() {
		private static final long serialVersionUID = -6862987030835995078L;

		{
			put("Tax", 0.0);
			put("VAT", 4.0);
			put("Sales Tax", 5.0);
			put("Service Tax", 4.5);
		}
	};
	private Label taxValue = new Label();

	private ComboBox productNameCB = new ComboBox(
			null,
			Arrays.asList(new String[] { "Lux Sandal", "Hamam", "Cinthol Old" }));
	private ComboBox productPriceCB = new ComboBox(null,
			Arrays.asList(new Double[] { 10.0, 20.0, 30.0, 40.0, 50.0 }));
	private TextField quantity = new TextField();
	private ComboBox qtySuffixCB = new ComboBox(null,
			Arrays.asList(new String[] { "pcs", "kg", "lt" }));
	private Button addToCartBT = new Button();

	private final String SUB_TOTAL = "SubTotal";
	private final String EMPTY = "";
	private final String ZERO = "0.0";
	private final String COLON = ":";
	private final String TOTAL = "Total";
	private final String TAX = "Tax";
	private final String SERIAL_NO = "No.";
	private final String PRODUCT_DESC = "Product Description";
	private final String UNIT_RATE = "Unit Rate";
	private final String QUANTITY = "Quantity";
	private final String AMOUNT = "Amount";
	private final String BILL_NO = "Bill No. ";
	private final String DATE = "Date :";
	private final String DATE_FORMAT = "dd-MM-yyyy";
	private final String ADD_TO_CART = "Add To Cart";
	private final String UPDATE_CART = "Update Cart";
	private final String PROMPT_PRODUCT_NAME = "Product Name";
	private final String PROMPT_PRODUCT_RATE = "Rate";
	private final String PROMPT_QUANTITY = "Quantity";
	private final String PROMPT_QTY_SUFFIX = "Unit";

	public BillingComponent() {
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		setWidth("100.0%");
		setHeight("100.0%");

		mainLayout.addComponent(buildBillingHeader());
		mainLayout.addComponent(buildAddToCart());
		mainLayout.addComponent(buildBillingTable());
		mainLayout.addComponent(buildBillingFooter());

		return mainLayout;
	}

	private Component buildBillingFooter() {
		GridLayout footerGrid = new GridLayout(3, 1);

		footerGrid.setImmediate(false);
		footerGrid.setWidth("100%");
		footerGrid.setMargin(false);
		footerGrid.setSpacing(true);

		footerGrid.addComponent(buildCustomerProfile(), 0, 0, 1, 0);
		footerGrid.addComponent(buildBillingPayments(), 2, 0);

		return footerGrid;
	}

	private Component buildBillingPayments() {
		VerticalLayout paymentLayout = new VerticalLayout();
		HorizontalLayout subTotalLayout = new HorizontalLayout();
		HorizontalLayout taxLayout = new HorizontalLayout();
		HorizontalLayout totalLayout = new HorizontalLayout();
		Label subTotal = new Label();
		Label subTotalColon = new Label();
		Label total = new Label();
		Label totalColon = new Label();
		Label taxColon = new Label();

		subTotal.setValue(SUB_TOTAL);
		subTotalValue.setValue(ZERO);
		subTotalValue.setStyleName("v-align-right");
		subTotalColon.setValue(COLON);
		subTotalColon.setStyleName("v-align-right");

		total.setValue(TOTAL);
		totalValue.setValue(ZERO);
		totalValue.setStyleName("v-align-right");
		totalColon.setValue(COLON);
		totalColon.setStyleName("v-align-right");

		taxType.select(TAX);
		taxType.setFilteringMode(FilteringMode.CONTAINS);
		taxType.setNullSelectionAllowed(false);
		taxType.setPageLength(5);
		taxType.setWidth("100%");
		taxType.setImmediate(true);
		taxType.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = -8058680659345726478L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				taxValue.setValue(String.valueOf((taxPercentage.get(event
						.getProperty().getValue()) * Double
						.parseDouble(subTotalValue.getValue())) / 100));
				totalValue.setValue(String.valueOf(Double
						.parseDouble(subTotalValue.getValue())
						+ Double.parseDouble(taxValue.getValue())));
			}
		});

		taxValue.setValue(ZERO);
		taxValue.setStyleName("v-align-right");
		taxColon.setValue(COLON);
		taxColon.setStyleName("v-align-right");

		paymentLayout.addComponent(subTotalLayout);
		paymentLayout.addComponent(taxLayout);
		paymentLayout.addComponent(totalLayout);

		subTotalLayout.addComponent(subTotal);
		subTotalLayout.addComponent(subTotalColon);
		subTotalLayout.addComponent(subTotalValue);

		taxLayout.addComponent(taxType);
		taxLayout.addComponent(taxColon);
		taxLayout.addComponent(taxValue);

		totalLayout.addComponent(total);
		totalLayout.addComponent(totalColon);
		totalLayout.addComponent(totalValue);

		subTotalLayout.setComponentAlignment(subTotal, Alignment.BOTTOM_LEFT);
		subTotalLayout.setComponentAlignment(subTotalColon,
				Alignment.BOTTOM_CENTER);
		subTotalLayout.setComponentAlignment(subTotalValue,
				Alignment.BOTTOM_RIGHT);
		subTotalLayout.setImmediate(false);
		subTotalLayout.setWidth("100%");
		subTotalLayout.setMargin(false);
		subTotalLayout.setSpacing(true);

		taxLayout.setComponentAlignment(taxType, Alignment.BOTTOM_LEFT);
		taxLayout.setComponentAlignment(taxColon, Alignment.BOTTOM_CENTER);
		taxLayout.setComponentAlignment(taxValue, Alignment.BOTTOM_RIGHT);
		taxLayout.setImmediate(false);
		taxLayout.setWidth("100%");
		taxLayout.setMargin(false);
		taxLayout.setSpacing(true);

		totalLayout.setComponentAlignment(total, Alignment.BOTTOM_LEFT);
		totalLayout.setComponentAlignment(totalColon, Alignment.BOTTOM_CENTER);
		totalLayout.setComponentAlignment(totalValue, Alignment.BOTTOM_RIGHT);
		totalLayout.setImmediate(false);
		totalLayout.setWidth("100%");
		totalLayout.setMargin(false);
		totalLayout.setSpacing(true);

		paymentLayout.setImmediate(false);
		paymentLayout.setWidth("100%");
		paymentLayout.setMargin(true);
		paymentLayout.setSpacing(true);

		return paymentLayout;
	}

	private Component buildCustomerProfile() {
		Panel customerPanel = new Panel("Customer details");

		customerPanel.setImmediate(false);
		customerPanel.setWidth("100%");
		customerPanel.setHeight("100%");

		return customerPanel;
	}

	private Component buildBillingTable() {
		Panel billingPanel = new Panel();

		billableItems.addContainerProperty(SERIAL_NO, Integer.class, null);
		billableItems.addContainerProperty(PRODUCT_DESC, String.class, "");
		billableItems.addContainerProperty(UNIT_RATE, Double.class, 0.0);
		billableItems.addContainerProperty(QUANTITY, String.class, "1");
		billableItems.addContainerProperty(AMOUNT, Double.class, 0.0);
		billableItems.setColumnAlignment("Amount", Align.RIGHT);
		billableItems.setPageLength(5);
		billableItems.setWidth("100%");
		billableItems.setColumnExpandRatio(SERIAL_NO, 1);
		billableItems.setColumnExpandRatio(PRODUCT_DESC, 18);
		billableItems.setColumnExpandRatio(UNIT_RATE, 4);
		billableItems.setColumnExpandRatio(QUANTITY, 2);
		billableItems.setColumnExpandRatio(AMOUNT, 6);
		billableItems.setSelectable(true);
		billableItems.setImmediate(true);
		billableItems
				.addValueChangeListener(new Property.ValueChangeListener() {
					private static final long serialVersionUID = 172879437178906284L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						if (null != event.getProperty().getValue()) {
							Item selectedItem = billableItems.getItem(event
									.getProperty().getValue());
							productNameCB.setValue(selectedItem
									.getItemProperty(PRODUCT_DESC).getValue());
							productPriceCB.setValue(selectedItem
									.getItemProperty(UNIT_RATE).getValue());
							String qtyArray[] = selectedItem
									.getItemProperty(QUANTITY).getValue()
									.toString().split(" ");
							quantity.setValue(qtyArray[0]);
							qtySuffixCB.setValue(qtyArray[1]);
							addToCartBT.setCaption(UPDATE_CART);
							addToCartBT.setEnabled(false);
							billableItems.focus();
						} else {
							resetAddToCart();
						}
					}
				});

		billingPanel.setImmediate(true);
		billingPanel.addActionHandler(new Handler() {
			private static final long serialVersionUID = 7522649455023798865L;
			Action actionDel = new ShortcutAction("Delete Item",
					ShortcutAction.KeyCode.DELETE, null);

			@Override
			public void handleAction(Action action, Object sender, Object target) {
				if (target instanceof Table) {
					if (action == actionDel) {
						billableItems.removeItem(billableItems.getValue());
						reOrderBillingSNo();
						updateBillingPayments();
					}
				}
			}

			@SuppressWarnings("unchecked")
			private void reOrderBillingSNo() {
				Integer itemId = 1;
				for (Iterator<?> i = billableItems.getItemIds().iterator(); i
						.hasNext();) {
					billableItems.getItem(i.next()).getItemProperty(SERIAL_NO)
							.setValue(itemId++);
				}
			}

			@Override
			public Action[] getActions(Object target, Object sender) {
				return new Action[] { actionDel };
			}
		});
		billingPanel.setWidth("100%");
		billingPanel.setHeight("100%");

		billingPanel.setContent(billableItems);

		return billingPanel;
	}

	protected void updateBillingPayments() {
		double subTotal = 0.0;
		for (Iterator<?> i = billableItems.getItemIds().iterator(); i.hasNext();) {
			subTotal += (Double) billableItems.getItem(i.next())
					.getItemProperty(AMOUNT).getValue();
		}
		subTotalValue.setValue(String.valueOf(subTotal));
		taxValue.setValue(String.valueOf((taxPercentage.get(taxType.getValue()) * Double
				.parseDouble(subTotalValue.getValue())) / 100));
		totalValue.setValue(String.valueOf(Double.parseDouble(subTotalValue
				.getValue()) + Double.parseDouble(taxValue.getValue())));
	}

	private Component buildAddToCart() {
		HorizontalLayout addToCartLayout = new HorizontalLayout();
		Property.ValueChangeListener addToCartEnabler;

		addToCartEnabler = new Property.ValueChangeListener() {
			private static final long serialVersionUID = 8262792786781169162L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (null != productNameCB.getValue()
						&& null != productPriceCB.getValue()
						&& null != quantity && null != qtySuffixCB.getValue()) {
					addToCartBT.setEnabled(true);
					addToCartBT.focus();
				} else {
					addToCartBT.setEnabled(false);
				}
			}
		};

		productNameCB.setInputPrompt(PROMPT_PRODUCT_NAME);
		productNameCB.setFilteringMode(FilteringMode.CONTAINS);
		productNameCB.setWidth("100%");
		productNameCB.setRequired(true);
		productNameCB.setPageLength(10);
		productNameCB.setNullSelectionAllowed(true);
		productNameCB.setImmediate(true);
		productNameCB.setNewItemsAllowed(true);
		productNameCB.setNewItemHandler(new NewItemHandler() {
			private static final long serialVersionUID = -6121404108772061043L;

			@Override
			public void addNewItem(String newProductName) {
				StringBuffer camelCasePName = new StringBuffer();
				Matcher camelCaseMatcher = Pattern.compile("([a-z])([a-z]*)",
						Pattern.CASE_INSENSITIVE).matcher(
						newProductName.trim().replaceAll("\\s+", " "));
				while (camelCaseMatcher.find()) {
					camelCaseMatcher.appendReplacement(camelCasePName,
							camelCaseMatcher.group(1).toUpperCase()
									+ camelCaseMatcher.group(2).toLowerCase());
				}
				camelCaseMatcher.appendTail(camelCasePName);
				productNameCB.addItem(camelCasePName.toString());
				productNameCB.setValue(camelCasePName.toString());
			}
		});
		productNameCB.addValueChangeListener(addToCartEnabler);

		productPriceCB.setInputPrompt(PROMPT_PRODUCT_RATE);
		productPriceCB.setFilteringMode(FilteringMode.STARTSWITH);
		productPriceCB.setWidth("100%");
		productPriceCB.setRequired(true);
		productPriceCB.setPageLength(10);
		productPriceCB.setNullSelectionAllowed(true);
		productPriceCB.setImmediate(true);
		productPriceCB.setNewItemsAllowed(true);
		productPriceCB.setNewItemHandler(new NewItemHandler() {
			private static final long serialVersionUID = 4239289366078811975L;

			@Override
			public void addNewItem(String newPrice) {
				Double parsedPrice = Double.parseDouble(newPrice.trim());
				productPriceCB.addItem(parsedPrice);
				productPriceCB.setValue(parsedPrice);
			}
		});
		productPriceCB.addValueChangeListener(addToCartEnabler);

		quantity.setInputPrompt(PROMPT_QUANTITY);
		quantity.setRequired(true);
		quantity.setWidth("100%");
		quantity.setImmediate(true);
		quantity.addValueChangeListener(addToCartEnabler);

		qtySuffixCB.setInputPrompt(PROMPT_QTY_SUFFIX);
		qtySuffixCB.setFilteringMode(FilteringMode.STARTSWITH);
		qtySuffixCB.setWidth("100%");
		qtySuffixCB.setRequired(true);
		qtySuffixCB.setPageLength(10);
		qtySuffixCB.setNullSelectionAllowed(true);
		qtySuffixCB.setImmediate(true);
		qtySuffixCB.addValueChangeListener(addToCartEnabler);

		addToCartBT.setCaption(ADD_TO_CART);
		addToCartBT.setWidth("100%");
		addToCartBT.setImmediate(true);
		addToCartBT.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = -4011081703632078210L;

			@SuppressWarnings("unchecked")
			@Override
			public void buttonClick(ClickEvent event) {
				final Object[] productInfo = new Object[5];

				if (ADD_TO_CART.equals(addToCartBT.getCaption())) {
					productInfo[0] = billableItems.size() + 1;
					productInfo[1] = productNameCB.getValue();
					productInfo[2] = productPriceCB.getValue();
					productInfo[3] = quantity.getValue() + " "
							+ qtySuffixCB.getValue();
					productInfo[4] = (Double) productPriceCB.getValue()
							* Double.parseDouble(quantity.getValue());
					billableItems.addItem(productInfo, billableItemId);
					billableItems.setCurrentPageFirstItemId(billableItemId++);
				} else {
					Item selectedItemId = billableItems.getItem(billableItems
							.getValue());
					selectedItemId.getItemProperty(PRODUCT_DESC).setValue(
							productNameCB.getValue());
					selectedItemId.getItemProperty(UNIT_RATE).setValue(
							productPriceCB.getValue());
					selectedItemId.getItemProperty(QUANTITY).setValue(
							quantity.getValue() + " " + qtySuffixCB.getValue());
					selectedItemId.getItemProperty(AMOUNT).setValue(
							(Double) productPriceCB.getValue()
									* Double.parseDouble(quantity.getValue()));
				}
				updateBillingPayments();
				resetAddToCart();
			}

		});

		resetAddToCart();

		addToCartLayout.setImmediate(false);
		addToCartLayout.setWidth("100%");
		addToCartLayout.setHeight("100%");
		addToCartLayout.setMargin(false);
		addToCartLayout.setSpacing(true);

		addToCartLayout.addComponent(productNameCB);
		addToCartLayout.addComponent(productPriceCB);
		addToCartLayout.addComponent(quantity);
		addToCartLayout.addComponent(qtySuffixCB);
		addToCartLayout.addComponent(addToCartBT);

		addToCartLayout.setExpandRatio(productNameCB, 4);
		addToCartLayout.setExpandRatio(productPriceCB, 1.5f);
		addToCartLayout.setExpandRatio(quantity, 1f);
		addToCartLayout.setExpandRatio(qtySuffixCB, 1f);
		addToCartLayout.setExpandRatio(addToCartBT, 1.5f);

		return addToCartLayout;
	}

	protected void resetAddToCart() {
		productNameCB.setValue(null);
		productPriceCB.setValue(null);
		quantity.setValue(EMPTY);
		qtySuffixCB.setValue(null);
		addToCartBT.setEnabled(false);
		addToCartBT.setCaption(ADD_TO_CART);
		productNameCB.focus();
	}

	private Component buildBillingHeader() {
		HorizontalLayout billingHeaderLayout = new HorizontalLayout();
		HorizontalLayout billNoLayout = new HorizontalLayout();
		HorizontalLayout billDateLayout = new HorizontalLayout();
		Label billNoCaption = new Label();
		Label billNo = new Label();
		Label billDateCaption = new Label();
		DateField billDate = new DateField();

		billingHeaderLayout.setImmediate(false);
		billingHeaderLayout.setWidth("100%");
		billingHeaderLayout.setHeight("100%");
		billingHeaderLayout.setMargin(false);
		billingHeaderLayout.setSpacing(false);
		billNoLayout.setSpacing(true);
		billDateLayout.setSpacing(true);

		billNoCaption.setValue(BILL_NO);
		billNo.setValue("1");
		billDateCaption.setValue(DATE);
		billDate.setValue(new Date());
		billDate.setReadOnly(true);
		billDate.setDateFormat(DATE_FORMAT);

		billingHeaderLayout.addComponent(billNoLayout);
		billingHeaderLayout.setComponentAlignment(billNoLayout,
				Alignment.MIDDLE_LEFT);
		billingHeaderLayout.addComponent(billDateLayout);
		billingHeaderLayout.setComponentAlignment(billDateLayout,
				Alignment.MIDDLE_RIGHT);

		billNoLayout.addComponent(billNoCaption);
		billNoLayout.addComponent(billNo);

		billDateLayout.addComponent(billDateCaption);
		billDateLayout.addComponent(billDate);

		return billingHeaderLayout;
	}
}
